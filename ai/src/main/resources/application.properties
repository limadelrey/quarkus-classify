# HTTP SERVER
quarkus.http.port=8082
quarkus.http.cors=true

# KAFKA
%dev.kafka.bootstrap.servers=localhost:9092
kafka.bootstrap.servers=quarkus-hackaton-kafka:9092

# KAFKA CONSUMER
mp.messaging.incoming.classification-request.connector=smallrye-kafka
mp.messaging.incoming.classification-request.topic=classification-request
mp.messaging.incoming.classification-request.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.classification-request.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.classification-request.group.id=classification-request-consumer-group
mp.messaging.incoming.classification-request.reconnect.backoff.ms=30000
mp.messaging.incoming.classification-request.auto.offset.reset=earliest
mp.messaging.incoming.classification-request.enable.auto.commit=true

# KAFKA PRODUCER
mp.messaging.outgoing.classification-reply.connector=smallrye-kafka
mp.messaging.outgoing.classification-reply.topic=classification-reply
mp.messaging.outgoing.classification-reply.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.classification-reply.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.classification-reply.client.id=classification-reply-producer
mp.messaging.outgoing.classification-reply.reconnect.backoff.ms=30000
mp.messaging.outgoing.classification-reply.enable.idempotence=true
mp.messaging.outgoing.classification-reply.acks=all
mp.messaging.outgoing.classification-reply.batch.size=16384
mp.messaging.outgoing.classification-reply.linger.ms=1
mp.messaging.outgoing.classification-reply.buffer.memory=33554432